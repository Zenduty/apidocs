openapi: 3.0.0
info:
  version: 1.0.0
  title: Zenduty
  termsOfService: 'https://zenduty.com'
  contact:
    email: vishwa@zenduty.com
  license:
    name: Apache 2.0
  x-logo:
    url: 'https://drive.google.com/file/d/1mziyz9JcPilQBYQb-PMW8qc6Z7scWLMN/view?usp=sharing'
  description: |
    # Introduction

    Zenduty is a cutting edge platform for incident management. With high level automation, Zenduty enables faster and better incident resolution keeping developers first.
tags:
  - name: Teams
    description: Operations about teams
  - name: Members
    description: Operations about team members
  - name: Services
    description: Operations about team services
  - name: Integrations
    description: Operations about service integrations
  - name: Events
    description: Events are a way for applications and services to send alerts to Zenduty
  - name: Incidents
    description: Operations about incidents
  - name: Escalation Policies
    description: Operations about escalation policies
  - name: Schedules
    description: Operations about schedules
paths:
  /api/account/teams:
    get:
      tags:
        - Teams
      summary: Get teams
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamWMember'
            application/xml:
              schema:
                $ref: '#/components/schemas/TeamWMember'
        '403':
          description: Forbidden
        '404':
          description: Not found
    post:
      tags:
        - Teams
      summary: Create Team
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
            application/xml:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTeamName'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewTeamName'
        description: New Team Name
        required: true
  '/api/account/teams/{team_id}':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
    get:
      tags:
        - Teams
      summary: Get team details
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamWMember'
            application/xml:
              schema:
                $ref: '#/components/schemas/TeamWMember'
        '400':
          description: Invalid
        '404':
          description: Not found
    delete:
      tags:
        - Teams
      summary: Delete a Team
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
        '400':
          description: Invalid
        '404':
          description: Not found
  '/api/account/teams/{team_id}/members':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
    post:
      tags:
        - Members
      summary: Add members to a team
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewMember'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewMember'
        '403':
          description: Forbidden
        '404':
          description: Not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserID'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserID'
        description: New Team Details
        required: true
  '/api/account/teams/{team_id}/members/{member_id}':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
      - name: member_id
        in: path
        description: Unique ID of member
        schema:
          type: string
        required: true
    delete:
      tags:
        - Members
      summary: Delete members from a team
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
        '404':
          description: Not found
  '/api/account/teams/{team_id}/services':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
    get:
      tags:
        - Services
      summary: Get Services for a team
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
        '403':
          description: Forbidden
        '404':
          description: Not found
    post:
      tags:
        - Services
      summary: Add new Service in a team
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
        '403':
          description: Forbidden
        '404':
          description: Not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewService'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewService'
        description: New Team Details
        required: true
  '/api/account/teams/{team_id}/services/{service_id}':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
      - name: service_id
        in: path
        description: Unique Service ID
        schema:
          type: string
        required: true
    get:
      tags:
        - Services
      summary: Get Services by ID
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
        '403':
          description: Forbidden
        '404':
          description: Not found
    patch:
      tags:
        - Services
      summary: Update Service
      parameters:
        - name: service_info
          in: query
          schema:
            $ref: '#/components/schemas/ServiceInfo'
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
        '403':
          description: Forbidden
        '404':
          description: Not found
    delete:
      tags:
        - Services
      summary: Delete Service from a team
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
        '404':
          description: Not found
  '/api/account/teams/{team_id}/services/{service_id}/integrations':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
      - name: service_id
        in: path
        description: Unique Service ID
        schema:
          type: string
        required: true
    get:
      tags:
        - Integrations
      summary: Get Integrations in a service
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
            application/xml:
              schema:
                $ref: '#/components/schemas/Integration'
        '403':
          description: Forbidden
        '404':
          description: Not found
    post:
      tags:
        - Integrations
      summary: Create Integration
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
            application/xml:
              schema:
                $ref: '#/components/schemas/Integration'
        '400':
          description: Invalid
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewIntegration'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewIntegration'
        description: New Integration Details
        required: true
  '/api/account/teams/{team_id}/services/{service_id}/integrations/{integration_id}':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
      - name: service_id
        in: path
        description: Unique Service ID
        schema:
          type: string
        required: true
      - name: integration_id
        in: path
        description: Unique Service ID
        schema:
          type: string
        required: true
    get:
      tags:
        - Integrations
      summary: Get Integrations by ID
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
            application/xml:
              schema:
                $ref: '#/components/schemas/Integration'
        '403':
          description: Forbidden
        '404':
          description: Not found
  '/api/account/teams/{team_id}/services/{service_id}/integrations/{integration_id}/alerts':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
      - name: service_id
        in: path
        description: Unique Service ID
        schema:
          type: string
        required: true
      - name: integration_id
        in: path
        description: Unique Service ID
        schema:
          type: string
        required: true
    get:
      tags:
        - Integrations
      summary: Get Alerts in an integration
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertList'
            application/xml:
              schema:
                $ref: '#/components/schemas/AlertList'
        '403':
          description: Forbidden
        '404':
          description: Not found
  /api/incidents:
    get:
      tags:
        - Incidents
      summary: Get Incidents
      parameters:
        - name: page
          in: query
          schema:
            type: integer
          example: 1
        - name: status
          in: query
          schema:
            type: integer
          example: 1
        - name: team_ids
          in: query
          schema:
            type: array
            items:
              type: string
        - name: service_ids
          in: query
          schema:
            type: array
            items:
              type: string
        - name: user_ids
          in: query
          schema:
            type: array
            items:
              type: string
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentList'
            application/xml:
              schema:
                $ref: '#/components/schemas/IncidentList'
        '403':
          description: Forbidden
        '404':
          description: Not found
  '/api/incidents/{incident_number}':
    parameters:
      - name: incident_number
        in: path
        schema:
          type: integer
        required: true
        description: Incident number
    get:
      tags:
        - Incidents
      summary: Get Incident by number
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incident'
            application/xml:
              schema:
                $ref: '#/components/schemas/Incident'
        '403':
          description: Forbidden
        '404':
          description: Not found
  '/api/incidents/{incident_number}/alerts':
    parameters:
      - name: incident_number
        in: path
        schema:
          type: integer
        required: true
        description: Incident number
    get:
      tags:
        - Incidents
      summary: Get Incident Alerts
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAlert'
            application/xml:
              schema:
                $ref: '#/components/schemas/ServiceAlert'
        '403':
          description: Forbidden
        '404':
          description: Not found
  '/api/incidents/{incident_number}/note':
    parameters:
      - name: incident_number
        in: path
        schema:
          type: integer
        required: true
        description: Incident number
    get:
      tags:
        - Incidents
      summary: Get Incident Notes
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentNoteList'
            application/xml:
              schema:
                $ref: '#/components/schemas/IncidentNoteList'
        '403':
          description: Forbidden
        '404':
          description: Not found
    patch:
      tags:
        - Incidents
      summary: Acknowledge or resolve Incidents
      parameters:
        - name: incident_info
          in: query
          schema:
            $ref: '#/components/schemas/Incident'
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incident'
            application/xml:
              schema:
                $ref: '#/components/schemas/Incident'
        '403':
          description: Forbidden
        '404':
          description: Not found
  '/api/events/{integration-key}':
    parameters:
      - name: integration-key
        in: path
        schema:
          type: string
        required: true
        description: Replace the integration-key with the Integration key you copied in Step 1
    post:
      tags:
        - Events
      summary: Create Event
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEvent'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewEvent'
        description: New Event
        required: true
  '/api/account/teams/{team_id}/escalation_policies':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
    get:
      tags:
        - Escalation Policies
      summary: Get Escalation Policies
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EP'
            application/xml:
              schema:
                $ref: '#/components/schemas/EP'
        '403':
          description: Forbidden
        '404':
          description: Not found
    post:
      tags:
        - Escalation Policies
      summary: Create Escalation Policy
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EP'
            application/xml:
              schema:
                $ref: '#/components/schemas/EP'
        '400':
          description: Invalid
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EP'
          application/xml:
            schema:
              $ref: '#/components/schemas/EP'
        description: New Escalation Policy Details
        required: true
  '/api/account/teams/{team_id}/escalation_policies/{ep_id}':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
      - name: ep_id
        in: path
        description: Unique ID of the escalation policy
        schema:
          type: string
        required: true
    get:
      tags:
        - Escalation Policies
      summary: Get Escalation Policy by ID
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EP'
            application/xml:
              schema:
                $ref: '#/components/schemas/EP'
        '403':
          description: Forbidden
        '404':
          description: Not found
    patch:
      tags:
        - Escalation Policies
      summary: Update an Escalation Policy
      parameters:
        - name: escalation_policy
          in: query
          schema:
            $ref: '#/components/schemas/EP'
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EP'
            application/xml:
              schema:
                $ref: '#/components/schemas/EP'
        '403':
          description: Forbidden
        '404':
          description: Not found
    delete:
      tags:
        - Escalation Policies
      summary: Delete an Escalation Policy
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
        '404':
          description: Not found
  '/api/account/teams/{team_id}/schedules':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
    get:
      tags:
        - Schedules
      summary: Get Schedules
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/Schedule'
        '403':
          description: Forbidden
        '404':
          description: Not found
    post:
      tags:
        - Schedules
      summary: Create a Schedule
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          description: Invalid
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
          application/xml:
            schema:
              $ref: '#/components/schemas/Schedule'
        description: New Schedule Details
        required: true
  '/api/account/teams/{team_id}/schedules/{schedule_id}':
    parameters:
      - name: team_id
        in: path
        description: Unique ID of team
        schema:
          type: string
        required: true
      - name: schedule_id
        in: path
        description: Unique ID of the schedule
        schema:
          type: string
        required: true
    get:
      tags:
        - Schedules
      summary: Get Schedule by ID
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/Schedule'
        '403':
          description: Forbidden
        '404':
          description: Not found
    patch:
      tags:
        - Schedules
      summary: Update a Schedule
      parameters:
        - name: schedule
          in: query
          schema:
            $ref: '#/components/schemas/Schedule'
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
            application/xml:
              schema:
                $ref: '#/components/schemas/Schedule'
        '403':
          description: Forbidden
        '404':
          description: Not found
    delete:
      tags:
        - Schedules
      summary: Delete a Schedule
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
        '403':
          description: Forbidden
        '404':
          description: Not found
components:
  schemas:
    Email:
      description: User email address
      type: string
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: System generated username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
    Member:
      description: Member in an account
      type: object
      properties:
        unique_id:
          description: Unique ID
          type: string
        time_zone:
          description: Time Zone of account
          type: string
        user:
          $ref: '#/components/schemas/User'
        joining_date:
          description: Joining date
          type: string
          format: date-time
        role:
          type: integer
    Team:
      description: Team in an account
      type: object
      properties:
        unique_id:
          description: ID of team
          type: string
        owner:
          description: Owner of teams
          type: string
        account:
          description: Account ID
          type: string
        name:
          description: Name of the team
          type: string
        creation_date:
          description: Date of creation
          type: string
          format: date-time
    TeamWMember:
      description: All Team Details
      type: object
      properties:
        team:
          $ref: '#/components/schemas/Team'
        member:
          $ref: '#/components/schemas/Member'
    NewMember:
      description: New Member in a Team
      type: object
      properties:
        unique_id:
          type: string
        team:
          type: string
        user:
          type: string
        joining_date:
          type: string
          format: date-time
    ServiceInfo:
      description: Information about a service
      type: object
      properties:
        name:
          type: string
          example: Test Service
        creation date:
          type: string
          format: date-time
        summary:
          type: string
          example: Test Summary
        description:
          type: string
          example: TS Description
        unique_id:
          type: string
        auto_resolve_timeout:
          type: integer
        created_by:
          type: string
        acknowlegement_timeout:
          type: integer
        status:
          type: integer
        escalation_policy:
          type: string
        team:
          type: string
    ApplicationRef:
      description: Details of the app
      type: object
      properties:
        name:
          type: string
          example: Sentry
        icon_url:
          type: string
          example: www.url.com
        summary:
          type: string
          example: Zenduty Sentry App
        description:
          type: string
          example: Sentry for Zenduty
        unique_id:
          type: string
        availability_plan_id:
          type: integer
          example: 1
        setup_instructions:
          type: string
    Integration:
      description: Details of integration
      type: object
      properties:
        name:
          type: string
          example: Sentry 2
        creation_date:
          type: string
          format: date-time
        summary:
          type: string
          example: Sentry prod 2
        unique_id:
          type: string
        service:
          type: string
        application:
          type: string
        application_reference:
          $ref: '#/components/schemas/ApplicationRef'
        integration_key:
          type: string
        created_by:
          type: string
        is_enabled:
          type: boolean
        create_incidents_for:
          type: integer
          example: 2
    Payload:
      description: payload of alert
      type: object
      properties:
        a:
          type: integer
        b:
          type: integer
        c:
          type: integer
    ServiceAlert:
      description: alert from a service
      type: object
      properties:
        integration_name:
          type: string
          example: Sentry
        incident:
          type: integer
          example: 37
        creation_date:
          type: string
          format: date-time
        status:
          type: integer
          example: 1
        message:
          type: string
          example: Testing Sentry 49
        integration_id:
          type: string
        suppressed:
          type: boolean
          default: false
        entity_id:
          type: string
        payload:
          $ref: '#/components/schemas/Payload'
        severity:
          type: integer
          description: '1 for info, 2 for warning, 3 for error, 4 for critical'
          example: 4
    AlertList:
      description: List of alerts
      type: object
      properties:
        count:
          type: integer
          example: 15
        next:
          type: string
          format: url
        previous:
          type: string
          format: url
        results:
          $ref: '#/components/schemas/ServiceAlert'
    NewTeamName:
      description: Name of the new team
      type: string
    UserID:
      description: ID of the user to be added.
      type: string
    NewService:
      description: Details of the new service
      type: object
      properties:
        name:
          description: Name of new service
          type: string
        description:
          description: Details of service
          type: string
        acknowledgement_timeout:
          type: integer
        auto_resolve_timeout:
          type: integer
        escalation_policy:
          type: string
        integration_id:
          type: string
    NewIntegration:
      description: Details of the new integration
      type: object
      properties:
        name:
          description: Name of new integration
          type: string
        summary:
          description: Summary of new integration
          type: string
        application:
          description: application ID
          type: string
    Incident:
      description: Details of the incident
      type: object
      properties:
        summary:
          description: Summary of the incident
          type: string
        incident_number:
          description: Service number
          type: integer
          example: 38
        creation_date:
          description: Date and Time of incident created
          type: string
          format: date-time
        status:
          type: integer
          example: 1
          description: '1 for Open, 2 for Acknowledged, 3 for resolved, 0 for all'
        unique_id:
          description: Incident ID
          type: string
        service_object:
          $ref: '#/components/schemas/ServiceInfo'
        title:
          type: string
          description: Title of the incident
        incident_key:
          type: string
          description: TBC
        priority:
          description: '1 for critical, 2 for high, 3 for moderate, 4 for low'
          type: integer
          example: 1
        urgency:
          description: '1 for high, 0 for low'
          type: integer
          example: 1
        merged_with:
          description: Incident number merged with
          type: integer
          example: 50
        assigned_to:
          description: ID of the user assigned to
          type: string
        assigned_to_name:
          description: Name of the assignee
          type: string
          example: John Doe
        resolved_date:
          type: string
          format: date-time
        acknowledged_date:
          type: string
          format: date-time
    IncidentList:
      description: List of incidents
      type: object
      properties:
        count:
          type: integer
          example: 15
        next:
          type: string
          format: url
        previous:
          type: string
          format: url
        results:
          $ref: '#/components/schemas/Incident'
    IncidentNote:
      description: notes for an incident
      type: object
      properties:
        unique_id:
          type: string
          description: Incident ID
        incident:
          type: integer
          description: Incident Number
          example: 38
        user:
          type: string
          description: User ID of the assignee
        note:
          type: string
          description: Note on the incident
        user_name:
          type: string
          description: Name of the assignee
    IncidentNoteList:
      type: object
      description: List of notes on an incident
      properties:
        count:
          type: integer
          description: Number of notes
        next:
          type: string
          format: url
        previous:
          type: string
          format: url
        results:
          $ref: '#/components/schemas/IncidentNote'
    EventImage:
      type: object
      description: Image attachments
      properties:
        image_src:
          type: string
        image_url:
          type: string
        image_text:
          type: string
    EventUrl:
      type: object
      description: Link attachments
      properties:
        link_url:
          type: string
        link_text:
          type: string
    EventNote:
      type: object
      description: Notes attachments
      properties:
        note_title:
          type: string
        note_text:
          type: string
    NewEvent:
      type: object
      description: Custom payload for an event
      properties:
        message:
          type: string
          description: This becomes the incident title. This field is required.
        summary:
          type: string
          description: This is the incident summary
        alert_type:
          type: string
          default: info
          description: 'Choices - critical, acknowledged, resolved, error, warning, info. This field is required.'
        suppressed:
          type: boolean
          default: false
          description: True or False
        entity_id:
          type: string
          description: 'A unique id for the alert.If not provided, the Zenduty API will create one'
        payload:
          type: object
          description: A JSON payload containing additional information about the alert
        images:
          $ref: '#/components/schemas/EventImage'
        links:
          $ref: '#/components/schemas/EventUrl'
        notes:
          $ref: '#/components/schemas/EventNote'
    EP_target:
      type: object
      properties:
        target_type:
          type: integer
        target_id:
          type: string
    EP_rules:
      type: object
      properties:
        delay:
          type: integer
          default: 0
        target:
          $ref: '#/components/schemas/EP_target'
        position:
          type: integer
        unique_id:
          type: string
    EP:
      type: object
      description: Payload for escalation policies
      properties:
        name:
          type: string
          description: Name of the Escalation policy
          example: Default Escalation Policy
        summary:
          type: string
          description: Summary of the EP
          example: This is the default escalation policy of the team
        description:
          type: string
          description: Description of the EP
        rules:
          $ref: '#/components/schemas/EP_rules'
        unique_id:
          type: string
        team:
          type: string
          description: Team ID
    Restriction:
      type: object
      description: Payload of a Schedule Restriction
      properties:
        duration:
          type: integer
          description: Duration of Restriction
        start_day_of_week:
          type: integer
          description: Day of the week. Takes integer values from 0 to 6 (inclusive)
          minimum: 0
          maximum: 6
        start_time_of day:
          type: string
          description: Time of the day
          example: 75600
        unique_id:
          type: string
          description: Unique ID of the restriction
    ScheduleUser:
      type: object
      description: Payload of a User attached to the schedule
      properties:
        user:
          type: string
          description: User ID of the user
        position:
          type: integer
          description: Position in the rotation
        unique_id:
          type: string
          description: unique ID of the User in the layer
    Layer:
      type: object
      description: Payload of a Schedule Layer
      properties:
        name:
          type: string
          description: name of the layer
        shift_length:
          type: integer
          description: Length of shift
        restrictions:
          $ref: '#/components/schemas/Restriction'
        rotation_start_time:
          type: string
          format: date-time
          description: start time of the shift
        rotation_end_time:
          type: string
          format: date-time
          description: End time of the shift
        restriction_type:
          type: integer
          minimum: 0
          maximum: 2
          description: '0 for no restriction, 1 for daily restrictions, 2 for weekly restrictions'
        is_active:
          type: boolean
          default: true
        last_edited:
          type: string
          format: date-time
        unique_id:
          type: string
          description: unique ID of the layer
        users:
          $ref: '#/components/schemas/ScheduleUser'
    Schedule:
      type: object
      description: Payload of a Schedule
      properties:
        name:
          type: string
          description: Name of the Schedule
        summary:
          type: string
          description: Summary of the Schedule
        description:
          type: string
          description: Description of the Schedule
        time_zone:
          type: string
          description: Time Zone of the Schedule
          example: Asia/Calcutta
        team:
          type: string
          description: Team ID
        layers:
          $ref: '#/components/schemas/Layer'
        unique_id:
          type: string
          description: Unique ID of the schedule
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
