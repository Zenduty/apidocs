
openapi: 3.0.0
info:
  version: '1.0.0' # Your API version
  title: Zenduty 

  termsOfService: 'https://zenduty.com'
  contact:
    email: vishwa@zenduty.com
  license:
    name: Apache 2.0
  x-logo:
    url: 'https://zenduty.com'
  description: |
    # Introduction
    
    Zenduty is a cutting edge platform for incident management. With high level automation, Zenduty enables faster and better incident resolution keeping developers first.

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Teams
    description: Operations about teams
  - name: Members
    description: Operations about team members
  - name: Services
    description: Operations about team services
  - name: Integrations
    description: Operations about service integrations
  - name: Events
    description: Events are a way for applications and services to send alerts to Zenduty
  - name: Incidents
    description: Operations about incidents 
  
# servers:
# - url: 'http://example.com/api/v1'
paths:
  '/api/account/teams':
    # documentation for get teams
    get: 
      tags:
      - Teams
      summary: Get teams
      # operationId: getTeams
    
      # security schemas applied to this operation
      security:
        - main_auth:
            - 'read:users' # for auth2 provide list of scopes here
        - api_key: []
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/TeamWMember'
            application/xml: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/TeamWMember'
        '403':
          description: Forbidden
        '404':
          description: Not found
    # documentation for create teams
    post:
      tags:
        - Teams
      summary: Create Team
      # operationId: createTeam
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/Team'
            application/xml:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid 
        '404':
          description: User not found
      # request body documentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTeamName'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewTeamName'
        description: New Team Name
        required: true
  '/api/account/teams/{team_id}':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
      get: 
        tags:
        - Teams
        summary: Get team details
        # operationId: getTeamDetails
      
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/TeamWMember'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/TeamWMember'
          '400':
            description: Invalid
          '404':
            description: Not found
      delete: 
        tags:
        - Teams
        summary: Delete a Team
        # operationId: deleteTeam
      
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
          '400':
            description: Invalid
          '404':
            description: Not found
        
  '/api/account/teams/{team_id}/members':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
      post: 
        tags:
        - Members
        summary: Add members to a team
        # operationId: addMembers
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema:
                  $ref: '#/components/schemas/NewMember'
              application/xml:
                schema:
                  $ref: '#/components/schemas/NewMember'
          '403':
            description: Forbidden
          '404':
            description: Not found
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserID'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserID'
          description: New Team Details
          required: true
  '/api/account/teams/{team_id}/members/{member_id}':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
        - name: 'member_id'
          in: path
          description: Unique ID of member
          schema:
            type: string
          required: true
      delete: 
        tags:
        - Members
        summary: Delete members from a team
        # operationId: delMembers
      
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/account/teams/{team_id}/services':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
      get: 
        tags:
        - Services
        summary: Get Services for a team
        # operationId: getServices
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
          '403':
            description: Forbidden
          '404':
            description: Not found
      post: 
        tags:
        - Services
        summary: Add new Service in a team
        # operationId: createService
        
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ServiceInfo'
              application/xml:
                schema:
                  $ref: '#/components/schemas/ServiceInfo'
          '403':
            description: Forbidden
          '404':
            description: Not found
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewService'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewService'
          description: New Team Details
          required: true
  '/api/account/teams/{team_id}/services/{service_id}':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
        - name: 'service_id'
          in: path
          description: Unique Service ID
          schema:
            type: string
          required: true
      get: 
        tags:
        - Services
        summary: Get Services by ID
        # operationId: getServiceID
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
          '403':
            description: Forbidden
          '404':
            description: Not found
      patch: 
        tags:
        - Services
        summary: Update Service
        # operationId: updateService
        # security schemas applied to this operation
        parameters:
          - name: service_info
            in: query
            schema:
              $ref: '#/components/schemas/ServiceInfo'
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
          '403':
            description: Forbidden
          '404':
            description: Not found
      delete: 
        tags:
        - Services
        summary: Delete Service from a team
        # operationId: delService
      
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/account/teams/{team_id}/services/{service_id}/integrations':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
        - name: 'service_id'
          in: path
          description: Unique Service ID
          schema:
            type: string
          required: true
      get: 
        tags:
        - Integrations
        summary: Get Integrations in a service
        # operationId: getIntegrations
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/Integration'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/Integration'
          '403':
            description: Forbidden
          '404':
            description: Not found
      post:
        tags:
          - Integrations
        summary: Create Integration
        # operationId: createIntegration
        security:
          - main_auth:
              - 'write:users'
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Integration'
              application/xml:
                schema:
                  $ref: '#/components/schemas/Integration'
          '400':
            description: Invalid 
          '404':
            description: User not found
        # request body documentation
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewIntegration'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewIntegration'
          description: New Integration Details
          required: true
  '/api/account/teams/{team_id}/services/{service_id}/integrations/{integration_id}':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
        - name: 'service_id'
          in: path
          description: Unique Service ID
          schema:
            type: string
          required: true
        - name: 'integration_id'
          in: path
          description: Unique Service ID
          schema:
            type: string
          required: true
      get: 
        tags:
        - Integrations
        summary: Get Integrations by ID
        # operationId: getIntegrationsID
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/Integration'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/Integration'
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/account/teams/{team_id}/services/{service_id}/integrations/{integration_id}/alerts':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
        - name: 'service_id'
          in: path
          description: Unique Service ID
          schema:
            type: string
          required: true
        - name: 'integration_id'
          in: path
          description: Unique Service ID
          schema:
            type: string
          required: true
      get: 
        tags:
        - Integrations
        summary: Get Alerts in an integration
        # operationId: getAlerts
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/AlertList'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/AlertList'
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/incidents':
      get: 
        tags:
        - Incidents
        summary: Get Incidents
        # operationId: getIncidents
        # security schemas applied to this operation
        parameters:
          - name: page
            in: query
            schema:
              type: integer
            example: 1
          - name: status
            in: query
            schema:
              type: integer
            example: 1
          - name: team_ids
            in: query
            schema: 
              type: array
              items:
                type: string
          - name: service_ids
            in: query
            schema:
              type: array
              items:
                type: string
          - name: user_ids
            in: query
            schema:
              type: array
              items:
                type: string
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/IncidentList'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/IncidentList'
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/incidents/{incident_number}':
      parameters:
        - name: incident_number
          in: path
          schema:
            type: integer
          required: true
          description: Incident number
      get: 
        tags:
        - Incidents
        summary: Get Incident by number
        # operationId: getIncidents
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/Incident'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/Incident'
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/incidents/{incident_number}/alerts':
      parameters:
        - name: incident_number
          in: path
          schema:
            type: integer
          required: true
          description: Incident number
      get: 
        tags:
        - Incidents
        summary: Get Incident Alerts
        # operationId: getIncidents
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceAlert'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceAlert'
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/incidents/{incident_number}/note':
      parameters:
        - name: incident_number
          in: path
          schema:
            type: integer
          required: true
          description: Incident number
      get: 
        tags:
        - Incidents
        summary: Get Incident Notes
        # operationId: getIncidents
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/IncidentNoteList'
              application/xml: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/IncidentNoteList'
          '403':
            description: Forbidden
          '404':
            description: Not found
      patch: 
          tags:
          - Incidents
          summary: Acknowledge or resolve Incidents
          # operationId: updateService
          # security schemas applied to this operation
          parameters:
            - name: incident_info
              in: query
              schema:
                $ref: '#/components/schemas/Incident'
          security:
            - main_auth:
                - 'read:users' # for auth2 provide list of scopes here
            - api_key: []
          responses: # list of responses
            '200':
              description: Success
              content:
                application/json: # operation response mime type
                  schema: # response schema can be specified for each response
                    $ref: '#/components/schemas/Incident'
                application/xml: # operation response mime type
                  schema: # response schema can be specified for each response
                    $ref: '#/components/schemas/Incident'
            '403':
              description: Forbidden
            '404':
              description: Not found
  '/api/events/{integration-key}':
    parameters:
    - name: integration-key
      in: path
      schema:
        type: string
      required: true
      description: Replace the integration-key with the Integration key you copied in Step 1
    post:
      tags:
        - Events
      summary: Create Event
        # operationId: createEvent
      security:
        - main_auth:
          - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid 
        '404':
          description: User not found
      requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewEvent'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewEvent'
          description: New Event
          required: true
            
# An object to hold reusable parts that can be used across the spec
components:
  schemas:
    Email:
      description: User email address
      type: string
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: System generated username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
    Member:
      description: Member in an account
      type: object
      properties:
        unique_id:
          description: Unique ID
          type: string
        time_zone:
          description: Time Zone of account
          type: string
        user:
            $ref: '#/components/schemas/User'
        joining_date:
          description: Joining date
          type: string
          format: date-time
        role:
          type: integer
    Team:
      description: Team in an account
      type: object
      properties:
        unique_id:
          description: ID of team
          type: string
        owner:
          description: Owner of teams
          type: string
        account: 
          description: Account ID
          type: string
        name:
          description: Name of the team
          type: string
        creation_date:
          description: Date of creation
          type: string
          format: date-time
    TeamWMember:
      description: All Team Details
      type: object
      properties:
        team: 
          $ref: '#/components/schemas/Team'
        member:
          $ref: '#/components/schemas/Member'
    NewMember:
      description: New Member in a Team
      type: object
      properties:
        unique_id:
          type: string
        team:
          type: string
        user:
          type: string
        joining_date:
          type: string
          format: date-time
    ServiceInfo:
      description: Information about a service
      type: object
      properties:
        name:
          type: string
          example: "Test Service"
        creation date:
          type: string
          format: date-time
        summary:
          type: string
          example: "Test Summary"
        description:
          type: string
          example: "TS Description"
        unique_id:
          type: string
        auto_resolve_timeout:
          type: integer
        created_by:
          type: string
        acknowlegement_timeout:
          type: integer
        status:
          type: integer
        escalation_policy: 
          type: string
        team:
          type: string
    ApplicationRef:
      description: Details of the app
      type: object 
      properties:
        name:
          type: string
          example: "Sentry"
        icon_url:
          type: string
          example: "www.url.com"
        summary:
          type: string
          example: "Zenduty Sentry App"
        description:
          type: string
          example: "Sentry for Zenduty"
        unique_id:
          type: string
        availability_plan_id:
          type: integer
          example: 1
        setup_instructions:
          type: string
    Integration:
      description: Details of integration
      type: object
      properties:
        name: 
          type: string
          example: "Sentry 2"
        creation_date:
          type: string
          format: date-time
        summary:
          type: string
          example: "Sentry prod 2"
        unique_id:
          type: string
        service:
          type: string
        application: 
          type: string
        application_reference:
          $ref: '#/components/schemas/ApplicationRef'
        integration_key:
          type: string
        created_by:
          type: string
        is_enabled:
          type: boolean
        create_incidents_for:
          type: integer
          example: 2
    Payload:
      description: payload of alert
      type: object
      properties: 
        a:
          type: integer
        b: 
          type: integer
        c: 
          type: integer
    ServiceAlert:
      description: alert from a service
      type: object
      properties:
        integration_name:
          type: string
          example: "Sentry"
        incident:
          type: integer
          example: 37
        creation_date:
          type: string
          format: date-time
        status:
          type: integer
          example: 1
        message: 
          type: string
          example: "Testing Sentry 49"
        integration_id:
          type: string
        suppressed: 
          type: boolean
          default: false
        entity_id:
          type: string
        payload:
          $ref: '#/components/schemas/Payload'
        severity:
          type: integer
          description: 1 for info, 2 for warning, 3 for error, 4 for critical
          example: 4
    AlertList:
      description: List of alerts
      type: object
      properties:
        count:
          type: integer
          example: 15
        next:
          type: string
          format: url
        previous:
          type: string
          format: url
        results:
          $ref: '#/components/schemas/ServiceAlert'
    NewTeamName:
      description: Name of the new team
      type: string
    UserID:
      description: ID of the user to be added.
      type: string
    NewService:
      description: Details of the new service
      type: object
      properties:
        name:
          description: Name of new service
          type: string
        description:
          description: Details of service
          type: string
        acknowledgement_timeout:
          type: integer
        auto_resolve_timeout:
          type: integer
        escalation_policy:
          type: string
        integration_id:
          type: string
    NewIntegration:
      description: Details of the new integration
      type: object
      properties:
        name:
          description: Name of new integration
          type: string
        summary:
          description: Summary of new integration
          type: string
        application:
          description: application ID
          type: string
    Incident:
      description: Details of the incident
      type: object
      properties:
        summary:
          description: Summary of the incident
          type: string
        incident_number:
          description: Service number
          type: integer
          example: 38
        creation_date: 
          description: Date and Time of incident created
          type: string
          format: date-time
        status:
          type: integer
          example: 1
          description: 1 for Open, 2 for Acknowledged, 3 for resolved, 0 for all
        unique_id:
          description: Incident ID
          type: string
        service_object:
          $ref: '#/components/schemas/ServiceInfo'
        title: 
          type: string
          description: Title of the incident
        incident_key:
          type: string
          description: TBC
        priority:
          description: 1 for critical, 2 for high, 3 for moderate, 4 for low
          type: integer
          example: 1
        urgency: 
          description: 1 for high, 0 for low
          type: integer
          example: 1
        merged_with:
          description: Incident number merged with
          type: integer
          example: 50
        assigned_to:
          description: ID of the user assigned to
          type: string
        assigned_to_name:
          description: Name of the assignee
          type: string
          example: John Doe
        resolved_date:
          type: string
          format: date-time
        acknowledged_date:
          type: string
          format: date-time
    IncidentList:
      description: List of incidents
      type: object
      properties:
        count:
          type: integer
          example: 15
        next:
          type: string
          format: url
        previous:
          type: string
          format: url
        results:
          $ref: '#/components/schemas/Incident'
    IncidentNote:
      description: notes for an incident
      type: object
      properties:
        unique_id: 
          type: string
          description: Incident ID
        incident:
          type: integer
          description: Incident Number
          example: 38
        user:
          type: string
          description: User ID of the assignee
        note:
          type: string
          description: Note on the incident
        user_name: 
          type: string
          description: Name of the assignee
    IncidentNoteList:
      type: object
      description: List of notes on an incident
      properties:
        count:
          type: integer
          description: Number of notes
        next:
          type: string
          format: url
        previous:
          type: string
          format: url
        results:
          $ref: '#/components/schemas/IncidentNote'
    NewEvent:
      type: object
      description: Custom payload for an event
      properties:
        message:
          type: string
          description: This becomes the incident title. This field is required.
        summary:
          type: string
          description: This is the incident summary
        alert_type:
          type: string
          default: info
          description: Choices - critical, acknowledged, resolved, error, warning, info. This field is required.
        suppressed:
          type: boolean
          default: no
          description: Yes or No
        entity_id:
          type: string
          description: A unique id for the alert.If not provided, the Zenduty API will create one
        payload:
          type: object
          description: A JSON payload containing additional information about the alert
          
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  # Security scheme definitions that can be used across the specification.
  securitySchemes:
    main_auth: # security definition name (you can name it as you want)
      # the following options are specific to oauth2 type
      type: oauth2 # authorization type, one of: oauth2, apiKey, http
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:  # security definition name (you can name it as you want)
      type: apiKey 
      # The following options are specific to apiKey type
      in: header # Where API key will be passed: header or query
      name: api_key # API key parameter name
    basic_auth: # security definition name (you can name it as you want)
      type: http
      scheme: basic
