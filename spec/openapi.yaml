
openapi: 3.0.0
info:
  version: '1.0.0' # Your API version
  title: Zenduty 

  termsOfService: 'https://zenduty.com'
  contact:
    email: vishwa@zenduty.com
  license:
    name: Apache 2.0
  x-logo:
    url: 'https://zenduty.com'
  description: |
    # Introduction
    Zenduty is a cutting edge platform for incident management. With high level automation, Zenduty enables faster and better incident resolution keeping developers first.

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Teams
    description: Operations about teams
  - name: Members
    description: Operations about team members
  - name: Services
    description: Operations about team services
  
# servers:
# - url: 'http://example.com/api/v1'
paths:
  '/api/account/teams':
    # documentation for get teams
    get: 
      tags:
      - Teams
      summary: Get teams
      operationId: getTeams
    
      # security schemas applied to this operation
      security:
        - main_auth:
            - 'read:users' # for auth2 provide list of scopes here
        - api_key: []
      responses: # list of responses
        '200':
          description: Success
          content:
            application/json: # operation response mime type
              schema: # response schema can be specified for each response
                $ref: '#/components/schemas/TeamWMember'
        '403':
          description: Forbidden
        '404':
          description: Not found
    # documentation for create teams
    post:
      tags:
        - Teams
      summary: Create Team
      operationId: createTeam
      parameters:
        - name: name
          in: query
          description: New Team Name
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid 
        '404':
          description: User not found
      # request body documentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
          application/xml:
            schema:
              $ref: '#/components/schemas/Team'
        description: New Team Details
        required: true
  '/api/account/teams/{team_id}':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
      get: 
        tags:
        - Teams
        summary: Get team details
        operationId: getTeamDetails
      
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/TeamWMember'
          '400':
            description: Invalid
          '404':
            description: Not found
      delete: 
        tags:
        - Teams
        summary: Delete a Team
        operationId: deleteTeam
      
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
          '400':
            description: Invalid
          '404':
            description: Not found
        
  '/api/account/teams/{team_id}/members':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
      post: 
        tags:
        - Members
        summary: Add members to a team
        operationId: addMembers
        parameters:
          - name: user_id
            in: query
            description: ID of the user to be added.
            schema:
              type: string
            required: true
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
          '403':
            description: Forbidden
          '404':
            description: Not found
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewMember'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewMember'
          description: New Team Details
          required: true
  '/api/account/teams/{team_id}/members/{member_id}':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
        - name: 'member_id'
          in: path
          description: Unique ID of member
          schema:
            type: string
          required: true
      delete: 
        tags:
        - Members
        summary: Delete members from a team
        operationId: delMembers
      
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/account/teams/{team_id}/services':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
      get: 
        tags:
        - Services
        summary: Get Services for a team
        operationId: getServices
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/account/teams/{team_id}/services/{service_id}':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
        - name: 'service_id'
          in: path
          description: Unique Service ID
          schema:
            type: string
          required: true
      get: 
        tags:
        - Services
        summary: Get Services by ID
        operationId: getServiceID
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
          '403':
            description: Forbidden
          '404':
            description: Not found
      patch: 
        tags:
        - Services
        summary: Update Service
        operationId: updateService
        # security schemas applied to this operation
        parameters:
          - name: service_info
            in: query
            schema:
              $ref: '#/components/schemas/ServiceInfo'
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/ServiceInfo'
          '403':
            description: Forbidden
          '404':
            description: Not found
  '/api/account/teams/{team_id}/services/{service_id}/integrations':
      parameters: 
        - name: 'team_id'
          in: path
          description: Unique ID of team
          schema:
            type: string
          required: true
        - name: 'service_id'
          in: path
          description: Unique Service ID
          schema:
            type: string
          required: true
      get: 
        tags:
        - Integrations
        summary: Get Integrations in a service
        operationId: getIntegrations
        # security schemas applied to this operation
        security:
          - main_auth:
              - 'read:users' # for auth2 provide list of scopes here
          - api_key: []
        responses: # list of responses
          '200':
            description: Success
            content:
              application/json: # operation response mime type
                schema: # response schema can be specified for each response
                  $ref: '#/components/schemas/Integration'
          '403':
            description: Forbidden
          '404':
            description: Not found

# An object to hold reusable parts that can be used across the spec
components:
  schemas:
    Email:
      description: User email address
      type: string
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: System generated username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
    Member:
      description: Member in an account
      type: object
      properties:
        unique_id:
          description: Unique ID
          type: string
        time_zone:
          description: Time Zone of account
          type: string
        user:
            $ref: '#/components/schemas/User'
        joining_date:
          description: Joining date
          type: string
          format: date-time
        role:
          type: integer
    Team:
      description: Team in an account
      type: object
      properties:
        unique_id:
          description: ID of team
          type: string
        owner:
          description: Owner of teams
          type: string
        account: 
          description: Account ID
          type: string
        name:
          description: Name of the team
          type: string
        creation_date:
          description: Date of creation
          type: string
          format: date-time
    TeamWMember:
      description: All Team Details
      type: object
      properties:
        team: 
          $ref: '#/components/schemas/Team'
        member:
          $ref: '#/components/schemas/Member'
    NewMember:
      description: New Member in a Team
      type: object
      properties:
        unique_id:
          type: string
        team:
          type: string
        user:
          type: string
        joining_date:
          type: string
          format: date-time
    ServiceInfo:
      description: Information about a service
      type: object
      properties:
        name:
          type: string
          example: "Test Service"
        creation date:
          type: string
          format: date-time
        summary:
          type: string
          example: "Test Summary"
        description:
          type: string
          example: "TS Description"
        unique_id:
          type: string
        auto_resolve_timeout:
          type: integer
        created_by:
          type: string
        acknowlegement_timeout:
          type: integer
        status:
          type: integer
        escalation_policy: 
          type: string
        team:
          type: string
    ApplicationRef:
      description: Details of the app
      type: object 
      properties:
        name:
          type: string
          example: "Sentry"
        icon_url:
          type: string
          example: "www.url.com"
        summary:
          type: string
          example: "Zenduty Sentry App"
        description:
          type: string
          example: "Sentry for Zenduty"
        unique_id:
          type: string
        availability_plan_id:
          type: integer
          example: 1
        setup_instructions:
          type: string
    Integration:
      description: Details of integration
      type: object
      properties:
        name: 
          type: string
          example: "Sentry 2"
        creation_date:
          type: string
          format: date-time
        summary:
          type: string
          example: "Sentry prod 2"
        unique_id:
          type: string
        application: 
          type: string
        application_reference:
          $ref: '#/components/schemas/ApplicationRef'
        integration_key:
          type: string
        created_by:
          type: string
        is_enabled:
          type: boolean
        create_incidents_for:
          type: integer
          example: 2
      
        
        
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  # Security scheme definitions that can be used across the specification.
  securitySchemes:
    main_auth: # security definition name (you can name it as you want)
      # the following options are specific to oauth2 type
      type: oauth2 # authorization type, one of: oauth2, apiKey, http
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:  # security definition name (you can name it as you want)
      type: apiKey 
      # The following options are specific to apiKey type
      in: header # Where API key will be passed: header or query
      name: api_key # API key parameter name
    basic_auth: # security definition name (you can name it as you want)
      type: http
      scheme: basic
